-- MySQL dump 10.13  Distrib 5.7.26, for Linux (x86_64)
--
-- Host: localhost    Database: bbs
-- ------------------------------------------------------
-- Server version	5.7.26-0ubuntu0.18.04.1

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `Blog`
--

DROP TABLE IF EXISTS `Blog`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `Blog` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `created_time` int(11) DEFAULT NULL,
  `updated_time` int(11) DEFAULT NULL,
  `title` varchar(64) COLLATE utf8mb4_unicode_ci NOT NULL,
  `content` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `user_id` int(11) NOT NULL,
  `user_name` varchar(50) COLLATE utf8mb4_unicode_ci NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `Blog`
--

LOCK TABLES `Blog` WRITE;
/*!40000 ALTER TABLE `Blog` DISABLE KEYS */;
INSERT INTO `Blog` VALUES (1,1561890752,1561890752,'markdown demo','# 示例\r\n\r\n# 标题\r\n\r\n**粗体**\r\n\r\n- 缩进\r\n  - 缩进\r\n\r\n行内高亮： `markdown`\r\n\r\n按键：CTRL\r\n\r\n> 多层引用\r\n> > 多层引用\r\n\r\n———— \r\n\r\n> 单层引用\r\n> 单层引用\r\n\r\n| 表格 | 表格 |\r\n| -    |  -   |\r\n| 表格 | 表格 |\r\n\r\n\r\n图片： ![图片](http://cdn.keyakizaka46.com/files/14/images/common/logo.svg)\r\n\r\n\r\n\r\n代码高亮：\r\n```python\r\ndef dict_recursion(dict_all):\r\n    if isinstance(dict_all, dict):\r\n        for x in dict_all:\r\n            dict_key = x\r\n            dict_value = dict_all[dict_key]\r\n            print(\"{}:{}\".format(dict_key, dict_value))\r\n            dict_recursion(dict_value)\r\n    else:\r\n        return\r\n```',2,'minmin'),(2,1561890752,1561890752,'blog demo','blog demo content',2,'minmin'),(3,1562454629,1562454629,'Markdown cheatsheet','# Headers/見出し/标题\r\n\r\n- 書き方:先頭に#をレベルの数だけ記述。\r\n```\r\n# Header1\r\n## Header2\r\n### Header3\r\n#### Header4\r\n##### Header5\r\n###### Header6\r\n```\r\n- 実際の表示\r\n# Header1\r\n## Header2\r\n### Header3\r\n#### Header4\r\n##### Header5\r\n###### Header6\r\n\r\n# Block/段落/分段\r\n\r\n- 書き方：空白行を挟むことで段落となる。\r\n```\r\n段落1\r\n(空行)\r\n段落2\r\n```\r\n\r\n- 実際の表示\r\n\r\n段落1\r\n\r\n段落2\r\n\r\n# Blockquotes 引用\r\n- 書き方：先頭に```>```を記述。ネストは```>```を多重に記述。\r\n```\r\n> 引用  \r\n> 引用\r\n>> 多重引用\r\n```\r\n\r\n- 実際の表示\r\n> 引用  \r\n> 引用\r\n>> 多重引用\r\n\r\n# Code コード\r\n- 書き方：````````` ３つで囲む。\r\n~~~\r\n```\r\nprint(\'hoge\')\r\n```\r\n~~~\r\n\r\n- 実際の表示\r\n```python\r\nprint(\'hoge\')\r\n```\r\n\r\n- 書き方：```~(ダッシュ)```３つで囲む。\r\n```\r\n~~~\r\nprint(\'hoge\')\r\n~~~\r\n```\r\n- 実際の表示\r\n~~~python\r\nprint(\'hoge\')\r\n~~~\r\n\r\n# インラインコード\r\n`バッククオート` で単語を囲むとインラインコードになる。\r\n```\r\nこれは `インラインコード`です。\r\n```\r\nこれは `インラインコード`です。\r\n\r\n# Hr 水平線\r\nアンダースコア`_` 、アスタリスク`*`、ハイフン`-`などを3つ以上連続して記述。\r\n\r\n```\r\nhoge\r\n***\r\nhoge\r\n___\r\nhoge\r\n---\r\n```\r\n\r\nhoge\r\n***\r\nhoge\r\n___\r\nhoge\r\n---\r\n\r\n# Lists\r\n## Ul 箇条書きリスト\r\nハイフン`-`、プラス`+`、アスタリスク`*`のいずれかを先頭に記述。\r\nネストはタブで表現。\r\n\r\n```\r\n- リスト1\r\n    - リスト1_1\r\n        - リスト1_1_1\r\n        - リスト1_1_2\r\n    - リスト1_2\r\n- リスト2\r\n- リスト3\r\n```\r\n\r\n- リスト1\r\n    - リスト1_1\r\n        - リスト1_1_1\r\n        - リスト1_1_2\r\n    - リスト1_2\r\n- リスト2\r\n- リスト3\r\n\r\n\r\n# Ol 番号付きリスト\r\n番号.を先頭に記述します。ネストはタブで表現します。\r\n番号は自動的に採番されるため、すべての行を1.と記述するのがお勧めです。\r\n\r\n```\r\n1. 番号付きリスト1\r\n    1. 番号付きリスト1-1\r\n    1. 番号付きリスト1-2\r\n1. 番号付きリスト2\r\n1. 番号付きリスト3\r\n````\r\n\r\n1. 番号付きリスト1\r\n    1. 番号付きリスト1-1\r\n    1. 番号付きリスト1-2\r\n1. 番号付きリスト2\r\n1. 番号付きリスト3\r\n\r\n# Span Elements\r\nLink リンク\r\n[表示文字](URL)でリンクに変換されます。\r\n\r\n```\r\n[Google](https://www.google.co.jp/)\r\n```\r\n[Google](https://www.google.co.jp/)\r\n\r\n\r\n# 強調\r\n## em\r\nアスタリスク`*`もしくはアンダースコア`_`1個で文字列を囲みます。\r\n\r\n```\r\nこれは *イタリック* です\r\nこれは _イタリック_ です\r\n```\r\n\r\nこれは *イタリック* です\r\nこれは _イタリック_ です\r\n\r\n\r\n## strong\r\nアスタリスク`*`もしくはアンダースコア`_`2個で文字列を囲みます。\r\n\r\n\'\'\'\r\nこれは **ボールド** です\r\nこれは __ボールド__ です\r\n\'\'\'\r\n\r\nこれは **ボールド** です\r\nこれは __ボールド__ です\r\n\r\n## em + strong\r\nアスタリスク`*`もしくはアンダースコア`_`3個で文字列を囲みます。\r\n\r\n```\r\nこれは ***イタリック＆ボールド*** です\r\nこれは ___イタリック＆ボールド___ です\r\n```\r\nこれは ***イタリック＆ボールド*** です\r\nこれは ___イタリック＆ボールド___ です\r\n\r\nImages 画像\r\n先頭の!で画像のと認識されます。画像の大きさなどの指定をする場合はimgタグを使用します。\r\n\r\n```\r\n![alt](/static/pics/pic1.png)\r\n```\r\n![alt](/static/pics/pic1.png)\r\n\r\n````\r\n<img src=\"/static/pics/pic1.png\" width=\"200\" height=\"200\">\r\n```\r\n<img src=\"/static/pics/pic1.png\" width=\"200\" height=\"200\">\r\n\r\n# Table 表\r\n-と|を使ってtableを作成します。\r\n\r\n```\r\nMarkdown | Less | Pretty\r\n--- | --- | ---\r\n*Still* | `renders` | **nicely**\r\n1 | 2 | 3\r\n```\r\nMarkdown | Less | Pretty\r\n--- | --- | ---\r\n*Still* | `renders` | **nicely**\r\n1 | 2 | 3',1,'min'),(4,1562497531,1562497531,'faviconの作り方','### ファビコンの付け方\r\n\r\n#### HTMLのヘッダーに下記文を追加し、かつimagesフィルダーにfavicon.icoを用意しておけば、ブラウザが自動的にGETしにくる\r\n```html\r\n  <link rel=\"icon\" href=\"/images/favicon.ico\">\r\n```\r\n\r\n例：\r\n```html\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\r\n   <head>\r\n  　　<!-- meta -->\r\n  　　<meta charset=\"utf-8\">\r\n  　　<!-- style -->\r\n  　　<link rel=\"stylesheet\" href=\"/static/css/index.min.css\" media=\"all\">\r\n　　  <!-- favicon -->\r\n  　　<link rel=\"icon\" href=\"/images/favicon.ico\">\r\n  　　<title>html title </title>\r\n　</head>\r\n　<body>\r\n　</body>\r\n</html>\r\n```',1,'min'),(5,1562497531,1562497531,'git','# よくあるGITの使い方\r\n1. 普通にローカルでフォルダを作って、コーディングを行う\r\n1. でGITにCOMMITする\r\n```\r\ngit commit -m \'任意のメッセージ\'\r\n```\r\n\r\n1. 他のところでもソースを見たいなあ、パソコン壊れた時は困るなあと思い、githubにでもアップロードしたいなあ\r\n1. なのでgithubで任意の名前のrespositoryを作ろう\r\n1. でgitは自動的に下記のリンクを生成してくれるので、コピーして上げましょう\r\n```\r\nhttps://github.com/<user name>/<respository name>.git\r\n``\r\n1. ローカルのフォルダーに移動して、下記のコマンドを打とう（1COMMITしていることが全体だよ）\r\n```\r\ngit remote add origin https://github.com/<user name>/<respository name>.git\r\n```\r\n1.それで、githubのwebsiteにアップロードしましょう\r\n```\r\ngit push -u origin master\r\n```\r\n※自分一人だけ作業しているので、masterに直接アップロード\r\n※windowsとかはdesktop applicatonあるので、GUI画面なので、便利かも',1,'min'),(6,1562497531,1562497531,'Well Know Ports','ポート番号 | 用途\r\n--- | --- \r\n20 |  FTPデータ転送ポート\r\n21 | FTPコントロールポート\r\n22 |  SSH\r\n23 |  Telnet\r\n25 | SMTP\r\n53 | DNS\r\n67  |  DHCP（サーバ）\r\n68  |   DHCP（クライアント）\r\n80 | HTTP\r\n110 | POP3\r\n443 | HTTPS\r\n',1,'min'),(7,1562497531,1562497531,'SNOWのdevインスタンスを自動的にアクティベートする','# SNOWのdevインスタンスを自動的にアクティベートする\r\n## 前提条件\r\n- NodeJsがインストールされていること\r\n- puppeteerがインストールされていること\r\n\r\n## 実装部分\r\n- 開発の行為をやる\r\n\r\n```javascript\r\nconst puppeteer = require(\'puppeteer\');\r\nasync function main() {\r\n    const browser = await puppeteer.launch({args: [\'--no-sandbox\', \'--disable-setuid-sandbox\']});\r\n    const page = await browser.newPage();\r\n    console.log(\"Opening page\");\r\n    await page.goto(\'https://dev<your instance id>.service-now.com/\', {waitUntil: \'networkidle0\', timeout:0}); // wait until page load\r\n    console.log(\"Page opened\");\r\n\r\n    console.log(\"Inputting username\");\r\n    const frame = await page.frames().find(f => f.name() === \'gsft_main\');\r\n    await (await frame.$(\'#user_name\')).type(\'<your_user_name>\');\r\n    await (await frame.$(\'#user_password\')).type(\'<your_password>\');\r\n    const login = await frame.$(\'#sysverb_login\')\r\n\r\n\r\n    await Promise.all([\r\n        login.click(),\r\n        await page.waitForNavigation({ waitUntil: \'networkidle0\'}),\r\n    ]);\r\n\r\n    const page2 = await browser.newPage();\r\n    await page2.goto(\'<any business rule\'s link>\', { waitUntil: \'networkidle0\' }); // wait until page load\r\n    const frame2 = await page2.frames().find(f => f.name() === \'gsft_main\')\r\n    const name = await frame2.$(\'input[id=\"sys_script.name\"]\')\r\n    let d = new Date()\r\n    let input_value = d.toGMTString().split(\",\").join()\r\n    await name.click({clickCount: 3});\r\n    await name.type(input_value, {delay: 20});\r\n\r\n    console.log(\"click update\");\r\n    const update = await frame2.$(\'#sysverb_update\')\r\n    await update.click()\r\n    pages = await browser.pages();\r\n    pages.forEach((page) => page.close());\r\n    await browser.close();\r\n}\r\n\r\nmain();\r\n```\r\n\r\n- 念の為にステータスも更新する\r\n\r\n```javascript\r\nconst puppeteer = require(\'puppeteer\');\r\nasync function main() {\r\n    const browser = await puppeteer.launch({args: [\'--no-sandbox\', \'--disable-setuid-sandbox\']});\r\n    const page = await browser.newPage();\r\n    await page.goto(\'https://developer.servicenow.com/app.do#!/instance\', { waitUntil: \'networkidle0\' }); // wait until page load\r\n    await page.waitForNavigation({ waitUntil: \'networkidle0\' });\r\n// Input username\r\n    console.log(\"Inputting username\");\r\n    await page.type(\'#username\', <your-user-name>);\r\n    await page.type(\'#password\', \'<your-login-password>\');\r\n    console.log(\"Username input completed\");\r\n\r\n// click and wait for navigation\r\n    await Promise.all([\r\n        await page.click(\'#submitButton\'),\r\n        await page.waitForNavigation({ waitUntil: \'networkidle0\' }),\r\n    ]);\r\n\r\n    console.log(\"Open new page\");\r\n    const page2 = await browser.newPage();\r\n    await page2.goto(\'https://developer.servicenow.com/app.do#!/instance\', { waitUntil: \'networkidle0\' }); // wait until page load\r\n    // await page2.waitForNavigation({ waitUntil: \'networkidle0\' });\r\n    await page2.click(\'#refresh_status\');\r\n    console.log(\"clicked\")\r\n    pages = await browser.pages();\r\n    pages.forEach((page) => page.close());\r\n    await browser.close();\r\n}\r\n\r\nmain();\r\n```\r\n\r\n[ソースはこちらでダウンロードできる](https://github.com/fanmin2019/snowAutoActivate)\r\n\r\n## スケジュール実行\r\n```\r\n24 */4 * * * node /tmp/snowlogin/update_business_rule.js >> /tmp/run.log\r\n50 */4 * * * node /tmp/snowlogin/refresh_status.js >> /tmp/run.log\r\n```',1,'min'),(8,1562497531,1562497531,'Proxy環境でnode jsのnpmを正常に通信させる方法','# Proxy環境でnode jsのnpmを正常に通信させる方法\r\n## 1.下記コマンドでwindowsとしてデフォルトに設定しているProxy設定を見ることができる\r\n```\r\nnpm config list\r\n```\r\n\r\n## 出力結果\r\n\r\n```\r\nC:\\Users\\XXXX\\Downloads>npm config list\r\n; cli configs\r\nmetrics-registry = \"http://registry.npmjs.org/\"\r\nscope = \"\"\r\nuser-agent = \"npm/6.9.0 node/v10.16.0 win32 ia32\"\r\n\r\n; userconfig C:\\Users\\XXXX\\.npmrc\r\nhttps-proxy = \"https://127.0.0.1:8080/\"\r\nproxy = \"http://127.0.0.1:8080/\"\r\nregistry = \"http://registry.npmjs.org/\"\r\n\r\n; builtin config undefined\r\nprefix = \"C:\\\\Users\\XXXX\\AppData\\\\Roaming\\\\npm\"\r\n\r\n; node bin location = C:\\Program Files\\nodejs\\node.exe\r\n; cwd = C:\\Users\\XXXX\\Downloads\r\n; HOME = C:\\Users\\XXXX\r\n; \"npm config ls -l\" to show all defaults.\r\n```\r\n\r\n## 2.上で得たproxy情報に認証情報を付け加えることが必須\r\n```\r\nnpm config set proxy http://<userid>:<password>@<server-address>:<port>\r\nnpm config set https-proxy http://<userid>:<password>@<server-address>:<port>\r\n```\r\n\r\n```\r\nnpm config set proxy http://fanmin:Hoge1234@127.0.0.1:8080\r\nnpm config set https-proxy http://fanmin:Hoge1234@127.0.0.1:8080\r\n```\r\n\r\n## Proxy設定を再度確認する\r\n```\r\nnpm config list\r\n```\r\n\r\n## 出力結果\r\n```\r\nC:\\Users\\XXXX\\Downloads>npm config list\r\n; cli configs\r\nmetrics-registry = \"http://registry.npmjs.org/\"\r\nscope = \"\"\r\nuser-agent = \"npm/6.9.0 node/v10.16.0 win32 ia32\"\r\n\r\n; userconfig C:\\Users\\XXXX\\.npmrc\r\nhttps-proxy = \"http://fanmin@Hoge1234@127.0.0.1:8080/\"\r\nproxy = \"http://fanmin@Hoge1234@127.0.0.1:8080/\"\r\nregistry = \"http://registry.npmjs.org/\"\r\n\r\n; builtin config undefined\r\nprefix = \"C:\\\\Users\\\\XXXX\\\\AppData\\\\Roaming\\\\npm\"\r\n\r\n; node bin location = C:\\Program Files\\nodejs\\node.exe\r\n; cwd = C:\\Users\\XXXX\\Downloads\r\n; HOME = C:\\Users\\XXXX\r\n; \"npm config ls -l\" to show all defaults.\r\n```\r\n\r\n## 4.試しにExpressをinstall\r\n```\r\nnpm install express\r\n```',1,'min'),(9,1562497531,1562497531,'IntelliJ系列如何竖选文本','如果需要使用，我们可以选中代码，右键单击，在弹出的菜单中选中【Column Selection Mode】列选中模式。当然，你也可以使用快捷键【shift + command + 8】（window环境可以参考Idea提示） \r\n',1,'min'),(10,1562497531,1562497531,'canvasを使って図を反転する方法','# canvasを使って図を水平方向に反転する方法（コード）\r\n```javascript\r\n\r\n//canvasの現状を一時保存\r\ncontext.save()\r\n\r\n//図のX軸の中心点のX座標を取得\r\nvar x = this.x + this.w / 2\r\n\r\n//yは反転しない\r\n//まずはcanvasを右にx単位水平移動する\r\ncontext.translate(x, 0)\r\n\r\n//canvasを左右反転する\r\ncontext.scale(-1, 1)\r\n\r\n//キャンバスを左へx単位水平移動する\r\ncontext.translate(-x, 0)\r\n\r\n//画像を描く\r\ncontext.drawImage(this.texture, this.x, this.y)\r\n\r\n//キャンバスを一時保存した状態に戻す\r\ncontext.restore()\r\n```\r\n\r\n# よく理解するための図解\r\n![hanten1](https://github.com/fanmin2019/minBlog/blob/master/%E5%9B%B3%E5%BD%A2%E3%81%AE%E5%8F%8D%E8%BB%A21.png?raw=true)\r\n![hanten2](https://github.com/fanmin2019/minBlog/blob/master/%E5%9B%B3%E5%BD%A2%E3%81%AE%E5%8F%8D%E8%BB%A22.png?raw=true)',1,'min'),(11,1562497531,1562497531,'このサイトのリリース方法','## 1.ローカルで開発を実施し、テストをしてから、gitに資材をコミットする\r\n## 2.バーチャルサーバにて、gitから更新された資材を取得し、アプリケーションが問題なく動くことを確認\r\n## 3.VPSにログインし、gitから更新された資材を取得し、必要に応じてデータベースのリセットをしたり、サーバの再起動を行う。\r\n- データベースのリセットを伴う場合、必ず事前にバックアップを取得すること\r\n- **本番環境で何か問題が起きたとしても、本番環境で資材を編集しないこと！！！**\r\n',1,'min');
/*!40000 ALTER TABLE `Blog` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2019-07-28 19:23:03
